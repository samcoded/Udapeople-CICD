version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      # Your code here
                      aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            - run:
                  name: Revert migrations
                  # Add when this will run
                  when: on_fail
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
                      # Logic for reverting the database state
                      if (( $SUCCESS == 1 ));
                      then
                        cd backend
                        npm install
                        npm run migration:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [frontend-build]
            # Your job code here
            - run:
                  name: test-frontend
                  command: |
                      cd frontend
                      npm i
                      npm run test

    test-backend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [backend-build]
            # Your job code here
            - run:
                  name: test-backend
                  command: |
                      cd backend
                      npm i
                      npm run test

    scan-frontend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [frontend-build]
            # Your job code here
            - run:
                  name: Front-end scan
                  command: |
                      cd frontend
                      npm i
                      npm audit fix --audit-level=critical --force

    scan-backend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [backend-build]
            # Your job code here
            - run:
                  name: Back-end scan
                  command: |
                      cd backend
                      npm i
                      npm audit fix --audit-level=critical --force

    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run:
                  name: Install tar utility
                  command: |
                      yum install -y tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                      --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                      --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text >> ~/project/.circleci/ansible/inventory.txt
                      cat ~/project/.circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [main]
